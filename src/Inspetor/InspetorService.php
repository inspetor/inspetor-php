<?php
/**
 * InspetorApi
 * PHP version 5
 *
 * @category Class
 * @package  Inspetor\Client
 * @author   Inspetor Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inspetor Antifraud
 *
 * This is an antifraud product developed to analyzes transactions and identify frauds using trackers and analytics tools. This file must explain every request and parametes that a library must provide to a client.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: theo@useinspetor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Inspetor Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Inspetor\Client\Api;

use Inspetor\Client\ApiException;
use Inspetor\Client\Configuration;

/**
 * InspetorServer Interface Doc Comment
 *
 * @category Class
 * @package  Inspetor\Client
 * @author   Inspetor Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
interface InspetorService {

    /**
     * @return Configuration
     */
    public function getConfig();
    /**
     * Operation trackAccountAction
     *
     * Send account data to Inspetor
     *
     * @param  \Inspetor\Client\Model\Account $account_data account_data (required)
     * @param  string $action action (required)
     *
     * @throws \Inspetor\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function trackAccountAction($account_data, $action);
    /**
     * Operation trackEventAction
     *
     * Send event data to Inspetor
     *
     * @param  \Inspetor\Client\Model\Event $event_data event_data (required)
     * @param  string $action action (required)
     *
     * @throws \Inspetor\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function trackEventAction($event_data, $action);
    /**
     * Operation trackPassRecovery
     *
     * Send pass recovery data to Inspetor
     *
     * @param  \Inspetor\Client\Model\PassRecovery $pass_recovery_data pass_recovery_data (required)
     * @param  string $action action (required)
     *
     * @throws \Inspetor\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function trackPassRecovery($pass_recovery_data, $action);
    /**
     * Operation trackTicketTransfer
     *
     * Send ticket transfer data to Inspetor
     *
     * @param  \Inspetor\Client\Model\Transfer $ticket_transfer_data ticket_transfer_data (required)
     * @param  string $action action (required)
     *
     * @throws \Inspetor\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function trackTicketTransfer($ticket_transfer_data, $action);
    /**
     * Operation trackTransactionAction
     *
     * Send transaction data to Inspetor
     *
     * @param  \Inspetor\Client\Model\Transaction $transaction_data transaction_data (required)
     * @param  string $action action (required)
     *
     * @throws \Inspetor\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function trackSaleAction($transaction_data, $action);
    /**
     * Operation trackUserAuthentication
     *
     * Send auth data to Inspetor
     *
     * @param  \Inspetor\Client\Model\Auth $auth_data auth_data (required)
     * @param  string $action action (required)
     *
     * @throws \Inspetor\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function trackUserAuthentication($auth_data, $action);
}
