<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inspetor Antifraud
 *
 * This is an antifraud product developed to analyzes transactions and identify frauds using trackers and analytics tools. This file must explain every request and parametes that a library must provide to a client.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: theo@useinspetor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_transaction_id' => 'string',
'order_sales' => 'string',
'order_sales_status' => 'string',
'order_user_id' => 'string',
'order_user_ip' => 'string',
'order_event_id' => 'string',
'order_event_date_id' => 'string',
'order_tickets' => 'object',
'order_total_price' => 'string',
'order_is_fraud' => 'bool',
'order_create_timestamp' => 'string',
'order_update_timestamp' => 'string',
'order_refund_reason' => 'string',
'order_refund_operator' => 'string',
'order_refund_cashier' => 'string',
'order_refund_date' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_transaction_id' => null,
'order_sales' => null,
'order_sales_status' => null,
'order_user_id' => null,
'order_user_ip' => null,
'order_event_id' => null,
'order_event_date_id' => null,
'order_tickets' => null,
'order_total_price' => null,
'order_is_fraud' => null,
'order_create_timestamp' => null,
'order_update_timestamp' => null,
'order_refund_reason' => null,
'order_refund_operator' => null,
'order_refund_cashier' => null,
'order_refund_date' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_transaction_id' => 'order_transaction_id',
'order_sales' => 'order_sales',
'order_sales_status' => 'order_sales_status',
'order_user_id' => 'order_user_id',
'order_user_ip' => 'order_user_ip',
'order_event_id' => 'order_event_id',
'order_event_date_id' => 'order_event_date_id',
'order_tickets' => 'order_tickets',
'order_total_price' => 'order_total_price',
'order_is_fraud' => 'order_is_fraud',
'order_create_timestamp' => 'order_create_timestamp',
'order_update_timestamp' => 'order_update_timestamp',
'order_refund_reason' => 'order_refund_reason',
'order_refund_operator' => 'order_refund_operator',
'order_refund_cashier' => 'order_refund_cashier',
'order_refund_date' => 'order_refund_date'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_transaction_id' => 'setOrderTransactionId',
'order_sales' => 'setOrderSales',
'order_sales_status' => 'setOrderSalesStatus',
'order_user_id' => 'setOrderUserId',
'order_user_ip' => 'setOrderUserIp',
'order_event_id' => 'setOrderEventId',
'order_event_date_id' => 'setOrderEventDateId',
'order_tickets' => 'setOrderTickets',
'order_total_price' => 'setOrderTotalPrice',
'order_is_fraud' => 'setOrderIsFraud',
'order_create_timestamp' => 'setOrderCreateTimestamp',
'order_update_timestamp' => 'setOrderUpdateTimestamp',
'order_refund_reason' => 'setOrderRefundReason',
'order_refund_operator' => 'setOrderRefundOperator',
'order_refund_cashier' => 'setOrderRefundCashier',
'order_refund_date' => 'setOrderRefundDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_transaction_id' => 'getOrderTransactionId',
'order_sales' => 'getOrderSales',
'order_sales_status' => 'getOrderSalesStatus',
'order_user_id' => 'getOrderUserId',
'order_user_ip' => 'getOrderUserIp',
'order_event_id' => 'getOrderEventId',
'order_event_date_id' => 'getOrderEventDateId',
'order_tickets' => 'getOrderTickets',
'order_total_price' => 'getOrderTotalPrice',
'order_is_fraud' => 'getOrderIsFraud',
'order_create_timestamp' => 'getOrderCreateTimestamp',
'order_update_timestamp' => 'getOrderUpdateTimestamp',
'order_refund_reason' => 'getOrderRefundReason',
'order_refund_operator' => 'getOrderRefundOperator',
'order_refund_cashier' => 'getOrderRefundCashier',
'order_refund_date' => 'getOrderRefundDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_transaction_id'] = isset($data['order_transaction_id']) ? $data['order_transaction_id'] : null;
        $this->container['order_sales'] = isset($data['order_sales']) ? $data['order_sales'] : null;
        $this->container['order_sales_status'] = isset($data['order_sales_status']) ? $data['order_sales_status'] : null;
        $this->container['order_user_id'] = isset($data['order_user_id']) ? $data['order_user_id'] : null;
        $this->container['order_user_ip'] = isset($data['order_user_ip']) ? $data['order_user_ip'] : null;
        $this->container['order_event_id'] = isset($data['order_event_id']) ? $data['order_event_id'] : null;
        $this->container['order_event_date_id'] = isset($data['order_event_date_id']) ? $data['order_event_date_id'] : null;
        $this->container['order_tickets'] = isset($data['order_tickets']) ? $data['order_tickets'] : null;
        $this->container['order_total_price'] = isset($data['order_total_price']) ? $data['order_total_price'] : null;
        $this->container['order_is_fraud'] = isset($data['order_is_fraud']) ? $data['order_is_fraud'] : null;
        $this->container['order_create_timestamp'] = isset($data['order_create_timestamp']) ? $data['order_create_timestamp'] : null;
        $this->container['order_update_timestamp'] = isset($data['order_update_timestamp']) ? $data['order_update_timestamp'] : null;
        $this->container['order_refund_reason'] = isset($data['order_refund_reason']) ? $data['order_refund_reason'] : null;
        $this->container['order_refund_operator'] = isset($data['order_refund_operator']) ? $data['order_refund_operator'] : null;
        $this->container['order_refund_cashier'] = isset($data['order_refund_cashier']) ? $data['order_refund_cashier'] : null;
        $this->container['order_refund_date'] = isset($data['order_refund_date']) ? $data['order_refund_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_transaction_id'] === null) {
            $invalidProperties[] = "'order_transaction_id' can't be null";
        }
        if ($this->container['order_sales'] === null) {
            $invalidProperties[] = "'order_sales' can't be null";
        }
        if ($this->container['order_event_date_id'] === null) {
            $invalidProperties[] = "'order_event_date_id' can't be null";
        }
        if ($this->container['order_is_fraud'] === null) {
            $invalidProperties[] = "'order_is_fraud' can't be null";
        }
        if ($this->container['order_update_timestamp'] === null) {
            $invalidProperties[] = "'order_update_timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_transaction_id
     *
     * @return string
     */
    public function getOrderTransactionId()
    {
        return $this->container['order_transaction_id'];
    }

    /**
     * Sets order_transaction_id
     *
     * @param string $order_transaction_id order_transaction_id
     *
     * @return $this
     */
    public function setOrderTransactionId($order_transaction_id)
    {
        $this->container['order_transaction_id'] = $order_transaction_id;

        return $this;
    }

    /**
     * Gets order_sales
     *
     * @return string
     */
    public function getOrderSales()
    {
        return $this->container['order_sales'];
    }

    /**
     * Sets order_sales
     *
     * @param string $order_sales order_sales
     *
     * @return $this
     */
    public function setOrderSales($order_sales)
    {
        $this->container['order_sales'] = $order_sales;

        return $this;
    }

    /**
     * Gets order_sales_status
     *
     * @return string
     */
    public function getOrderSalesStatus()
    {
        return $this->container['order_sales_status'];
    }

    /**
     * Sets order_sales_status
     *
     * @param string $order_sales_status order_sales_status
     *
     * @return $this
     */
    public function setOrderSalesStatus($order_sales_status)
    {
        $this->container['order_sales_status'] = $order_sales_status;

        return $this;
    }

    /**
     * Gets order_user_id
     *
     * @return string
     */
    public function getOrderUserId()
    {
        return $this->container['order_user_id'];
    }

    /**
     * Sets order_user_id
     *
     * @param string $order_user_id order_user_id
     *
     * @return $this
     */
    public function setOrderUserId($order_user_id)
    {
        $this->container['order_user_id'] = $order_user_id;

        return $this;
    }

    /**
     * Gets order_user_ip
     *
     * @return string
     */
    public function getOrderUserIp()
    {
        return $this->container['order_user_ip'];
    }

    /**
     * Sets order_user_ip
     *
     * @param string $order_user_ip order_user_ip
     *
     * @return $this
     */
    public function setOrderUserIp($order_user_ip)
    {
        $this->container['order_user_ip'] = $order_user_ip;

        return $this;
    }

    /**
     * Gets order_event_id
     *
     * @return string
     */
    public function getOrderEventId()
    {
        return $this->container['order_event_id'];
    }

    /**
     * Sets order_event_id
     *
     * @param string $order_event_id order_event_id
     *
     * @return $this
     */
    public function setOrderEventId($order_event_id)
    {
        $this->container['order_event_id'] = $order_event_id;

        return $this;
    }

    /**
     * Gets order_event_date_id
     *
     * @return string
     */
    public function getOrderEventDateId()
    {
        return $this->container['order_event_date_id'];
    }

    /**
     * Sets order_event_date_id
     *
     * @param string $order_event_date_id order_event_date_id
     *
     * @return $this
     */
    public function setOrderEventDateId($order_event_date_id)
    {
        $this->container['order_event_date_id'] = $order_event_date_id;

        return $this;
    }

    /**
     * Gets order_tickets
     *
     * @return object
     */
    public function getOrderTickets()
    {
        return $this->container['order_tickets'];
    }

    /**
     * Sets order_tickets
     *
     * @param object $order_tickets order_tickets
     *
     * @return $this
     */
    public function setOrderTickets($order_tickets)
    {
        $this->container['order_tickets'] = $order_tickets;

        return $this;
    }

    /**
     * Gets order_total_price
     *
     * @return string
     */
    public function getOrderTotalPrice()
    {
        return $this->container['order_total_price'];
    }

    /**
     * Sets order_total_price
     *
     * @param string $order_total_price order_total_price
     *
     * @return $this
     */
    public function setOrderTotalPrice($order_total_price)
    {
        $this->container['order_total_price'] = $order_total_price;

        return $this;
    }

    /**
     * Gets order_is_fraud
     *
     * @return bool
     */
    public function getOrderIsFraud()
    {
        return $this->container['order_is_fraud'];
    }

    /**
     * Sets order_is_fraud
     *
     * @param bool $order_is_fraud order_is_fraud
     *
     * @return $this
     */
    public function setOrderIsFraud($order_is_fraud)
    {
        $this->container['order_is_fraud'] = $order_is_fraud;

        return $this;
    }

    /**
     * Gets order_create_timestamp
     *
     * @return string
     */
    public function getOrderCreateTimestamp()
    {
        return $this->container['order_create_timestamp'];
    }

    /**
     * Sets order_create_timestamp
     *
     * @param string $order_create_timestamp order_create_timestamp
     *
     * @return $this
     */
    public function setOrderCreateTimestamp($order_create_timestamp)
    {
        $this->container['order_create_timestamp'] = $order_create_timestamp;

        return $this;
    }

    /**
     * Gets order_update_timestamp
     *
     * @return string
     */
    public function getOrderUpdateTimestamp()
    {
        return $this->container['order_update_timestamp'];
    }

    /**
     * Sets order_update_timestamp
     *
     * @param string $order_update_timestamp order_update_timestamp
     *
     * @return $this
     */
    public function setOrderUpdateTimestamp($order_update_timestamp)
    {
        $this->container['order_update_timestamp'] = $order_update_timestamp;

        return $this;
    }

    /**
     * Gets order_refund_reason
     *
     * @return string
     */
    public function getOrderRefundReason()
    {
        return $this->container['order_refund_reason'];
    }

    /**
     * Sets order_refund_reason
     *
     * @param string $order_refund_reason order_refund_reason
     *
     * @return $this
     */
    public function setOrderRefundReason($order_refund_reason)
    {
        $this->container['order_refund_reason'] = $order_refund_reason;

        return $this;
    }

    /**
     * Gets order_refund_operator
     *
     * @return string
     */
    public function getOrderRefundOperator()
    {
        return $this->container['order_refund_operator'];
    }

    /**
     * Sets order_refund_operator
     *
     * @param string $order_refund_operator order_refund_operator
     *
     * @return $this
     */
    public function setOrderRefundOperator($order_refund_operator)
    {
        $this->container['order_refund_operator'] = $order_refund_operator;

        return $this;
    }

    /**
     * Gets order_refund_cashier
     *
     * @return string
     */
    public function getOrderRefundCashier()
    {
        return $this->container['order_refund_cashier'];
    }

    /**
     * Sets order_refund_cashier
     *
     * @param string $order_refund_cashier order_refund_cashier
     *
     * @return $this
     */
    public function setOrderRefundCashier($order_refund_cashier)
    {
        $this->container['order_refund_cashier'] = $order_refund_cashier;

        return $this;
    }

    /**
     * Gets order_refund_date
     *
     * @return string
     */
    public function getOrderRefundDate()
    {
        return $this->container['order_refund_date'];
    }

    /**
     * Sets order_refund_date
     *
     * @param string $order_refund_date order_refund_date
     *
     * @return $this
     */
    public function setOrderRefundDate($order_refund_date)
    {
        $this->container['order_refund_date'] = $order_refund_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
