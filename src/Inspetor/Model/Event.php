<?php
/**
 * Event
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inspetor Antifraud
 *
 * This is an antifraud product developed to analyzes transactions and identify frauds using trackers and analytics tools. This file must explain every request and parametes that a library must provide to a client.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: theo@useinspetor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Event implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event_id' => 'string',
'event_name_hash' => 'string',
'event_description_hash' => 'string',
'event_create_timestamp' => 'string',
'event_update_timestamp' => 'string',
'event_sessions' => '\Swagger\Client\Model\Session[]',
'event_status' => 'string',
'event_status_other' => 'string',
'event_categories' => '\Swagger\Client\Model\Category[]',
'event_address' => '\Swagger\Client\Model\Address',
'event_url' => 'string',
'event_producer_id' => 'string',
'event_admins_id' => 'null[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'event_id' => null,
'event_name_hash' => null,
'event_description_hash' => null,
'event_create_timestamp' => null,
'event_update_timestamp' => null,
'event_sessions' => null,
'event_status' => null,
'event_status_other' => null,
'event_categories' => null,
'event_address' => null,
'event_url' => null,
'event_producer_id' => null,
'event_admins_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_id' => 'event_id',
'event_name_hash' => 'event_name_hash',
'event_description_hash' => 'event_description_hash',
'event_create_timestamp' => 'event_create_timestamp',
'event_update_timestamp' => 'event_update_timestamp',
'event_sessions' => 'event_sessions',
'event_status' => 'event_status',
'event_status_other' => 'event_status_other',
'event_categories' => 'event_categories',
'event_address' => 'event_address',
'event_url' => 'event_url',
'event_producer_id' => 'event_producer_id',
'event_admins_id' => 'event_admins_id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_id' => 'setEventId',
'event_name_hash' => 'setEventNameHash',
'event_description_hash' => 'setEventDescriptionHash',
'event_create_timestamp' => 'setEventCreateTimestamp',
'event_update_timestamp' => 'setEventUpdateTimestamp',
'event_sessions' => 'setEventSessions',
'event_status' => 'setEventStatus',
'event_status_other' => 'setEventStatusOther',
'event_categories' => 'setEventCategories',
'event_address' => 'setEventAddress',
'event_url' => 'setEventUrl',
'event_producer_id' => 'setEventProducerId',
'event_admins_id' => 'setEventAdminsId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_id' => 'getEventId',
'event_name_hash' => 'getEventNameHash',
'event_description_hash' => 'getEventDescriptionHash',
'event_create_timestamp' => 'getEventCreateTimestamp',
'event_update_timestamp' => 'getEventUpdateTimestamp',
'event_sessions' => 'getEventSessions',
'event_status' => 'getEventStatus',
'event_status_other' => 'getEventStatusOther',
'event_categories' => 'getEventCategories',
'event_address' => 'getEventAddress',
'event_url' => 'getEventUrl',
'event_producer_id' => 'getEventProducerId',
'event_admins_id' => 'getEventAdminsId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EVENT_STATUS_DRAFT = 'draft';
const EVENT_STATUS__PRIVATE = 'private';
const EVENT_STATUS_PUBLISHED = 'published';
const EVENT_STATUS_OTHER = 'other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventStatusAllowableValues()
    {
        return [
            self::EVENT_STATUS_DRAFT,
self::EVENT_STATUS__PRIVATE,
self::EVENT_STATUS_PUBLISHED,
self::EVENT_STATUS_OTHER,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_id'] = isset($data['event_id']) ? $data['event_id'] : null;
        $this->container['event_name_hash'] = isset($data['event_name_hash']) ? $data['event_name_hash'] : null;
        $this->container['event_description_hash'] = isset($data['event_description_hash']) ? $data['event_description_hash'] : null;
        $this->container['event_create_timestamp'] = isset($data['event_create_timestamp']) ? $data['event_create_timestamp'] : null;
        $this->container['event_update_timestamp'] = isset($data['event_update_timestamp']) ? $data['event_update_timestamp'] : null;
        $this->container['event_sessions'] = isset($data['event_sessions']) ? $data['event_sessions'] : null;
        $this->container['event_status'] = isset($data['event_status']) ? $data['event_status'] : null;
        $this->container['event_status_other'] = isset($data['event_status_other']) ? $data['event_status_other'] : null;
        $this->container['event_categories'] = isset($data['event_categories']) ? $data['event_categories'] : null;
        $this->container['event_address'] = isset($data['event_address']) ? $data['event_address'] : null;
        $this->container['event_url'] = isset($data['event_url']) ? $data['event_url'] : null;
        $this->container['event_producer_id'] = isset($data['event_producer_id']) ? $data['event_producer_id'] : null;
        $this->container['event_admins_id'] = isset($data['event_admins_id']) ? $data['event_admins_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['event_id'] === null) {
            $invalidProperties[] = "'event_id' can't be null";
        }
        if ($this->container['event_create_timestamp'] === null) {
            $invalidProperties[] = "'event_create_timestamp' can't be null";
        }
        if ($this->container['event_update_timestamp'] === null) {
            $invalidProperties[] = "'event_update_timestamp' can't be null";
        }
        if ($this->container['event_sessions'] === null) {
            $invalidProperties[] = "'event_sessions' can't be null";
        }
        if ($this->container['event_status'] === null) {
            $invalidProperties[] = "'event_status' can't be null";
        }
        $allowedValues = $this->getEventStatusAllowableValues();
        if (!is_null($this->container['event_status']) && !in_array($this->container['event_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'event_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['event_status_other'] === null) {
            $invalidProperties[] = "'event_status_other' can't be null";
        }
        if ($this->container['event_categories'] === null) {
            $invalidProperties[] = "'event_categories' can't be null";
        }
        if ($this->container['event_url'] === null) {
            $invalidProperties[] = "'event_url' can't be null";
        }
        if ($this->container['event_producer_id'] === null) {
            $invalidProperties[] = "'event_producer_id' can't be null";
        }
        if ($this->container['event_admins_id'] === null) {
            $invalidProperties[] = "'event_admins_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id event_id
     *
     * @return $this
     */
    public function setEventId($event_id)
    {
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets event_name_hash
     *
     * @return string
     */
    public function getEventNameHash()
    {
        return $this->container['event_name_hash'];
    }

    /**
     * Sets event_name_hash
     *
     * @param string $event_name_hash event_name_hash
     *
     * @return $this
     */
    public function setEventNameHash($event_name_hash)
    {
        $this->container['event_name_hash'] = $event_name_hash;

        return $this;
    }

    /**
     * Gets event_description_hash
     *
     * @return string
     */
    public function getEventDescriptionHash()
    {
        return $this->container['event_description_hash'];
    }

    /**
     * Sets event_description_hash
     *
     * @param string $event_description_hash event_description_hash
     *
     * @return $this
     */
    public function setEventDescriptionHash($event_description_hash)
    {
        $this->container['event_description_hash'] = $event_description_hash;

        return $this;
    }

    /**
     * Gets event_create_timestamp
     *
     * @return string
     */
    public function getEventCreateTimestamp()
    {
        return $this->container['event_create_timestamp'];
    }

    /**
     * Sets event_create_timestamp
     *
     * @param string $event_create_timestamp event_create_timestamp
     *
     * @return $this
     */
    public function setEventCreateTimestamp($event_create_timestamp)
    {
        $this->container['event_create_timestamp'] = $event_create_timestamp;

        return $this;
    }

    /**
     * Gets event_update_timestamp
     *
     * @return string
     */
    public function getEventUpdateTimestamp()
    {
        return $this->container['event_update_timestamp'];
    }

    /**
     * Sets event_update_timestamp
     *
     * @param string $event_update_timestamp event_update_timestamp
     *
     * @return $this
     */
    public function setEventUpdateTimestamp($event_update_timestamp)
    {
        $this->container['event_update_timestamp'] = $event_update_timestamp;

        return $this;
    }

    /**
     * Gets event_sessions
     *
     * @return \Swagger\Client\Model\Session[]
     */
    public function getEventSessions()
    {
        return $this->container['event_sessions'];
    }

    /**
     * Sets event_sessions
     *
     * @param \Swagger\Client\Model\Session[] $event_sessions event_sessions
     *
     * @return $this
     */
    public function setEventSessions($event_sessions)
    {
        $this->container['event_sessions'] = $event_sessions;

        return $this;
    }

    /**
     * Gets event_status
     *
     * @return string
     */
    public function getEventStatus()
    {
        return $this->container['event_status'];
    }

    /**
     * Sets event_status
     *
     * @param string $event_status event_status
     *
     * @return $this
     */
    public function setEventStatus($event_status)
    {
        $allowedValues = $this->getEventStatusAllowableValues();
        if (!in_array($event_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'event_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['event_status'] = $event_status;

        return $this;
    }

    /**
     * Gets event_status_other
     *
     * @return string
     */
    public function getEventStatusOther()
    {
        return $this->container['event_status_other'];
    }

    /**
     * Sets event_status_other
     *
     * @param string $event_status_other event_status_other
     *
     * @return $this
     */
    public function setEventStatusOther($event_status_other)
    {
        $this->container['event_status_other'] = $event_status_other;

        return $this;
    }

    /**
     * Gets event_categories
     *
     * @return \Swagger\Client\Model\Category[]
     */
    public function getEventCategories()
    {
        return $this->container['event_categories'];
    }

    /**
     * Sets event_categories
     *
     * @param \Swagger\Client\Model\Category[] $event_categories event_categories
     *
     * @return $this
     */
    public function setEventCategories($event_categories)
    {
        $this->container['event_categories'] = $event_categories;

        return $this;
    }

    /**
     * Gets event_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getEventAddress()
    {
        return $this->container['event_address'];
    }

    /**
     * Sets event_address
     *
     * @param \Swagger\Client\Model\Address $event_address event_address
     *
     * @return $this
     */
    public function setEventAddress($event_address)
    {
        $this->container['event_address'] = $event_address;

        return $this;
    }

    /**
     * Gets event_url
     *
     * @return string
     */
    public function getEventUrl()
    {
        return $this->container['event_url'];
    }

    /**
     * Sets event_url
     *
     * @param string $event_url event_url
     *
     * @return $this
     */
    public function setEventUrl($event_url)
    {
        $this->container['event_url'] = $event_url;

        return $this;
    }

    /**
     * Gets event_producer_id
     *
     * @return string
     */
    public function getEventProducerId()
    {
        return $this->container['event_producer_id'];
    }

    /**
     * Sets event_producer_id
     *
     * @param string $event_producer_id event_producer_id
     *
     * @return $this
     */
    public function setEventProducerId($event_producer_id)
    {
        $this->container['event_producer_id'] = $event_producer_id;

        return $this;
    }

    /**
     * Gets event_admins_id
     *
     * @return null[]
     */
    public function getEventAdminsId()
    {
        return $this->container['event_admins_id'];
    }

    /**
     * Sets event_admins_id
     *
     * @param null[] $event_admins_id event_admins_id
     *
     * @return $this
     */
    public function setEventAdminsId($event_admins_id)
    {
        $this->container['event_admins_id'] = $event_admins_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
