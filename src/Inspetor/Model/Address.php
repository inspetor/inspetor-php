<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inspetor Antifraud
 *
 * This is an antifraud product developed to analyzes transactions and identify frauds using trackers and analytics tools. This file must explain every request and parametes that a library must provide to a client.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: theo@useinspetor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'street_address_hash' => 'string',
'city_hash' => 'string',
'state_hash' => 'string',
'zip_hash' => 'string',
'latitude_hash' => 'string',
'longitude_hash' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'street_address_hash' => null,
'city_hash' => null,
'state_hash' => null,
'zip_hash' => null,
'latitude_hash' => null,
'longitude_hash' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'street_address_hash' => 'street_address_hash',
'city_hash' => 'city_hash',
'state_hash' => 'state_hash',
'zip_hash' => 'zip_hash',
'latitude_hash' => 'latitude_hash',
'longitude_hash' => 'longitude_hash'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'street_address_hash' => 'setStreetAddressHash',
'city_hash' => 'setCityHash',
'state_hash' => 'setStateHash',
'zip_hash' => 'setZipHash',
'latitude_hash' => 'setLatitudeHash',
'longitude_hash' => 'setLongitudeHash'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'street_address_hash' => 'getStreetAddressHash',
'city_hash' => 'getCityHash',
'state_hash' => 'getStateHash',
'zip_hash' => 'getZipHash',
'latitude_hash' => 'getLatitudeHash',
'longitude_hash' => 'getLongitudeHash'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['street_address_hash'] = isset($data['street_address_hash']) ? $data['street_address_hash'] : null;
        $this->container['city_hash'] = isset($data['city_hash']) ? $data['city_hash'] : null;
        $this->container['state_hash'] = isset($data['state_hash']) ? $data['state_hash'] : null;
        $this->container['zip_hash'] = isset($data['zip_hash']) ? $data['zip_hash'] : null;
        $this->container['latitude_hash'] = isset($data['latitude_hash']) ? $data['latitude_hash'] : null;
        $this->container['longitude_hash'] = isset($data['longitude_hash']) ? $data['longitude_hash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['street_address_hash'] === null) {
            $invalidProperties[] = "'street_address_hash' can't be null";
        }
        if ($this->container['city_hash'] === null) {
            $invalidProperties[] = "'city_hash' can't be null";
        }
        if ($this->container['state_hash'] === null) {
            $invalidProperties[] = "'state_hash' can't be null";
        }
        if ($this->container['zip_hash'] === null) {
            $invalidProperties[] = "'zip_hash' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets street_address_hash
     *
     * @return string
     */
    public function getStreetAddressHash()
    {
        return $this->container['street_address_hash'];
    }

    /**
     * Sets street_address_hash
     *
     * @param string $street_address_hash street_address_hash
     *
     * @return $this
     */
    public function setStreetAddressHash($street_address_hash)
    {
        $this->container['street_address_hash'] = $street_address_hash;

        return $this;
    }

    /**
     * Gets city_hash
     *
     * @return string
     */
    public function getCityHash()
    {
        return $this->container['city_hash'];
    }

    /**
     * Sets city_hash
     *
     * @param string $city_hash city_hash
     *
     * @return $this
     */
    public function setCityHash($city_hash)
    {
        $this->container['city_hash'] = $city_hash;

        return $this;
    }

    /**
     * Gets state_hash
     *
     * @return string
     */
    public function getStateHash()
    {
        return $this->container['state_hash'];
    }

    /**
     * Sets state_hash
     *
     * @param string $state_hash state_hash
     *
     * @return $this
     */
    public function setStateHash($state_hash)
    {
        $this->container['state_hash'] = $state_hash;

        return $this;
    }

    /**
     * Gets zip_hash
     *
     * @return string
     */
    public function getZipHash()
    {
        return $this->container['zip_hash'];
    }

    /**
     * Sets zip_hash
     *
     * @param string $zip_hash zip_hash
     *
     * @return $this
     */
    public function setZipHash($zip_hash)
    {
        $this->container['zip_hash'] = $zip_hash;

        return $this;
    }

    /**
     * Gets latitude_hash
     *
     * @return string
     */
    public function getLatitudeHash()
    {
        return $this->container['latitude_hash'];
    }

    /**
     * Sets latitude_hash
     *
     * @param string $latitude_hash latitude_hash
     *
     * @return $this
     */
    public function setLatitudeHash($latitude_hash)
    {
        $this->container['latitude_hash'] = $latitude_hash;

        return $this;
    }

    /**
     * Gets longitude_hash
     *
     * @return string
     */
    public function getLongitudeHash()
    {
        return $this->container['longitude_hash'];
    }

    /**
     * Sets longitude_hash
     *
     * @param string $longitude_hash longitude_hash
     *
     * @return $this
     */
    public function setLongitudeHash($longitude_hash)
    {
        $this->container['longitude_hash'] = $longitude_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
