<?php
/**
 * Transfer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inspetor Antifraud
 *
 * This is an antifraud product developed to analyzes transactions and identify frauds using trackers and analytics tools. This file must explain every request and parametes that a library must provide to a client.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: theo@useinspetor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Transfer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transfer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transfer_id' => 'string',
'transfer_create_timestamp' => 'string',
'transfer_update_timestamp' => 'string',
'transfer_sales' => 'string',
'transfer_transaction_id' => 'string',
'transfer_ticket_id' => 'string',
'transfer_sender_id' => 'string',
'transfer_receiver_email_hash' => 'string',
'transfer_event_id' => 'string',
'transfer_event_date_id' => 'string',
'transfer_status' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transfer_id' => null,
'transfer_create_timestamp' => null,
'transfer_update_timestamp' => null,
'transfer_sales' => null,
'transfer_transaction_id' => null,
'transfer_ticket_id' => null,
'transfer_sender_id' => null,
'transfer_receiver_email_hash' => null,
'transfer_event_id' => null,
'transfer_event_date_id' => null,
'transfer_status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transfer_id' => 'transfer_id',
'transfer_create_timestamp' => 'transfer_create_timestamp',
'transfer_update_timestamp' => 'transfer_update_timestamp',
'transfer_sales' => 'transfer_sales',
'transfer_transaction_id' => 'transfer_transaction_id',
'transfer_ticket_id' => 'transfer_ticket_id',
'transfer_sender_id' => 'transfer_sender_id',
'transfer_receiver_email_hash' => 'transfer_receiver_email_hash',
'transfer_event_id' => 'transfer_event_id',
'transfer_event_date_id' => 'transfer_event_date_id',
'transfer_status' => 'transfer_status'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transfer_id' => 'setTransferId',
'transfer_create_timestamp' => 'setTransferCreateTimestamp',
'transfer_update_timestamp' => 'setTransferUpdateTimestamp',
'transfer_sales' => 'setTransferSales',
'transfer_transaction_id' => 'setTransferTransactionId',
'transfer_ticket_id' => 'setTransferTicketId',
'transfer_sender_id' => 'setTransferSenderId',
'transfer_receiver_email_hash' => 'setTransferReceiverEmailHash',
'transfer_event_id' => 'setTransferEventId',
'transfer_event_date_id' => 'setTransferEventDateId',
'transfer_status' => 'setTransferStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transfer_id' => 'getTransferId',
'transfer_create_timestamp' => 'getTransferCreateTimestamp',
'transfer_update_timestamp' => 'getTransferUpdateTimestamp',
'transfer_sales' => 'getTransferSales',
'transfer_transaction_id' => 'getTransferTransactionId',
'transfer_ticket_id' => 'getTransferTicketId',
'transfer_sender_id' => 'getTransferSenderId',
'transfer_receiver_email_hash' => 'getTransferReceiverEmailHash',
'transfer_event_id' => 'getTransferEventId',
'transfer_event_date_id' => 'getTransferEventDateId',
'transfer_status' => 'getTransferStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSFER_STATUS_ACCEPTED = 'accepted';
const TRANSFER_STATUS_REJECTED = 'rejected';
const TRANSFER_STATUS_PENDING = 'pending';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransferStatusAllowableValues()
    {
        return [
            self::TRANSFER_STATUS_ACCEPTED,
self::TRANSFER_STATUS_REJECTED,
self::TRANSFER_STATUS_PENDING,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transfer_id'] = isset($data['transfer_id']) ? $data['transfer_id'] : null;
        $this->container['transfer_create_timestamp'] = isset($data['transfer_create_timestamp']) ? $data['transfer_create_timestamp'] : null;
        $this->container['transfer_update_timestamp'] = isset($data['transfer_update_timestamp']) ? $data['transfer_update_timestamp'] : null;
        $this->container['transfer_sales'] = isset($data['transfer_sales']) ? $data['transfer_sales'] : null;
        $this->container['transfer_transaction_id'] = isset($data['transfer_transaction_id']) ? $data['transfer_transaction_id'] : null;
        $this->container['transfer_ticket_id'] = isset($data['transfer_ticket_id']) ? $data['transfer_ticket_id'] : null;
        $this->container['transfer_sender_id'] = isset($data['transfer_sender_id']) ? $data['transfer_sender_id'] : null;
        $this->container['transfer_receiver_email_hash'] = isset($data['transfer_receiver_email_hash']) ? $data['transfer_receiver_email_hash'] : null;
        $this->container['transfer_event_id'] = isset($data['transfer_event_id']) ? $data['transfer_event_id'] : null;
        $this->container['transfer_event_date_id'] = isset($data['transfer_event_date_id']) ? $data['transfer_event_date_id'] : null;
        $this->container['transfer_status'] = isset($data['transfer_status']) ? $data['transfer_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transfer_id'] === null) {
            $invalidProperties[] = "'transfer_id' can't be null";
        }
        if ($this->container['transfer_update_timestamp'] === null) {
            $invalidProperties[] = "'transfer_update_timestamp' can't be null";
        }
        if ($this->container['transfer_sales'] === null) {
            $invalidProperties[] = "'transfer_sales' can't be null";
        }
        if ($this->container['transfer_transaction_id'] === null) {
            $invalidProperties[] = "'transfer_transaction_id' can't be null";
        }
        if ($this->container['transfer_ticket_id'] === null) {
            $invalidProperties[] = "'transfer_ticket_id' can't be null";
        }
        if ($this->container['transfer_sender_id'] === null) {
            $invalidProperties[] = "'transfer_sender_id' can't be null";
        }
        if ($this->container['transfer_receiver_email_hash'] === null) {
            $invalidProperties[] = "'transfer_receiver_email_hash' can't be null";
        }
        if ($this->container['transfer_event_id'] === null) {
            $invalidProperties[] = "'transfer_event_id' can't be null";
        }
        if ($this->container['transfer_event_date_id'] === null) {
            $invalidProperties[] = "'transfer_event_date_id' can't be null";
        }
        if ($this->container['transfer_status'] === null) {
            $invalidProperties[] = "'transfer_status' can't be null";
        }
        $allowedValues = $this->getTransferStatusAllowableValues();
        if (!is_null($this->container['transfer_status']) && !in_array($this->container['transfer_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transfer_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transfer_id
     *
     * @return string
     */
    public function getTransferId()
    {
        return $this->container['transfer_id'];
    }

    /**
     * Sets transfer_id
     *
     * @param string $transfer_id transfer_id
     *
     * @return $this
     */
    public function setTransferId($transfer_id)
    {
        $this->container['transfer_id'] = $transfer_id;

        return $this;
    }

    /**
     * Gets transfer_create_timestamp
     *
     * @return string
     */
    public function getTransferCreateTimestamp()
    {
        return $this->container['transfer_create_timestamp'];
    }

    /**
     * Sets transfer_create_timestamp
     *
     * @param string $transfer_create_timestamp transfer_create_timestamp
     *
     * @return $this
     */
    public function setTransferCreateTimestamp($transfer_create_timestamp)
    {
        $this->container['transfer_create_timestamp'] = $transfer_create_timestamp;

        return $this;
    }

    /**
     * Gets transfer_update_timestamp
     *
     * @return string
     */
    public function getTransferUpdateTimestamp()
    {
        return $this->container['transfer_update_timestamp'];
    }

    /**
     * Sets transfer_update_timestamp
     *
     * @param string $transfer_update_timestamp transfer_update_timestamp
     *
     * @return $this
     */
    public function setTransferUpdateTimestamp($transfer_update_timestamp)
    {
        $this->container['transfer_update_timestamp'] = $transfer_update_timestamp;

        return $this;
    }

    /**
     * Gets transfer_sales
     *
     * @return string
     */
    public function getTransferSales()
    {
        return $this->container['transfer_sales'];
    }

    /**
     * Sets transfer_sales
     *
     * @param string $transfer_sales transfer_sales
     *
     * @return $this
     */
    public function setTransferSales($transfer_sales)
    {
        $this->container['transfer_sales'] = $transfer_sales;

        return $this;
    }

    /**
     * Gets transfer_transaction_id
     *
     * @return string
     */
    public function getTransferTransactionId()
    {
        return $this->container['transfer_transaction_id'];
    }

    /**
     * Sets transfer_transaction_id
     *
     * @param string $transfer_transaction_id transfer_transaction_id
     *
     * @return $this
     */
    public function setTransferTransactionId($transfer_transaction_id)
    {
        $this->container['transfer_transaction_id'] = $transfer_transaction_id;

        return $this;
    }

    /**
     * Gets transfer_ticket_id
     *
     * @return string
     */
    public function getTransferTicketId()
    {
        return $this->container['transfer_ticket_id'];
    }

    /**
     * Sets transfer_ticket_id
     *
     * @param string $transfer_ticket_id transfer_ticket_id
     *
     * @return $this
     */
    public function setTransferTicketId($transfer_ticket_id)
    {
        $this->container['transfer_ticket_id'] = $transfer_ticket_id;

        return $this;
    }

    /**
     * Gets transfer_sender_id
     *
     * @return string
     */
    public function getTransferSenderId()
    {
        return $this->container['transfer_sender_id'];
    }

    /**
     * Sets transfer_sender_id
     *
     * @param string $transfer_sender_id transfer_sender_id
     *
     * @return $this
     */
    public function setTransferSenderId($transfer_sender_id)
    {
        $this->container['transfer_sender_id'] = $transfer_sender_id;

        return $this;
    }

    /**
     * Gets transfer_receiver_email_hash
     *
     * @return string
     */
    public function getTransferReceiverEmailHash()
    {
        return $this->container['transfer_receiver_email_hash'];
    }

    /**
     * Sets transfer_receiver_email_hash
     *
     * @param string $transfer_receiver_email_hash transfer_receiver_email_hash
     *
     * @return $this
     */
    public function setTransferReceiverEmailHash($transfer_receiver_email_hash)
    {
        $this->container['transfer_receiver_email_hash'] = $transfer_receiver_email_hash;

        return $this;
    }

    /**
     * Gets transfer_event_id
     *
     * @return string
     */
    public function getTransferEventId()
    {
        return $this->container['transfer_event_id'];
    }

    /**
     * Sets transfer_event_id
     *
     * @param string $transfer_event_id transfer_event_id
     *
     * @return $this
     */
    public function setTransferEventId($transfer_event_id)
    {
        $this->container['transfer_event_id'] = $transfer_event_id;

        return $this;
    }

    /**
     * Gets transfer_event_date_id
     *
     * @return string
     */
    public function getTransferEventDateId()
    {
        return $this->container['transfer_event_date_id'];
    }

    /**
     * Sets transfer_event_date_id
     *
     * @param string $transfer_event_date_id transfer_event_date_id
     *
     * @return $this
     */
    public function setTransferEventDateId($transfer_event_date_id)
    {
        $this->container['transfer_event_date_id'] = $transfer_event_date_id;

        return $this;
    }

    /**
     * Gets transfer_status
     *
     * @return string
     */
    public function getTransferStatus()
    {
        return $this->container['transfer_status'];
    }

    /**
     * Sets transfer_status
     *
     * @param string $transfer_status transfer_status
     *
     * @return $this
     */
    public function setTransferStatus($transfer_status)
    {
        $allowedValues = $this->getTransferStatusAllowableValues();
        if (!in_array($transfer_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transfer_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transfer_status'] = $transfer_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
