<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inspetor Antifraud
 *
 * This is an antifraud product developed to analyzes transactions and identify frauds using trackers and analytics tools. This file must explain every request and parametes that a library must provide to a client.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: theo@useinspetor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_id' => 'string',
'transaction_sales' => 'string',
'transaction_user_id' => 'string',
'transaction_value' => 'string',
'transaction_create_timestamp' => 'string',
'transaction_update_timestamp' => 'string',
'transaction_event_id' => 'string',
'transaction_event_date_id' => 'string',
'transaction_status' => 'string',
'transaction_payment_method' => 'string',
'transaction_payment_info' => '',
'transaction_installments' => 'string',
'transaction_is_fraud' => 'bool',
'transaction_tickets_id' => 'null[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_id' => null,
'transaction_sales' => null,
'transaction_user_id' => null,
'transaction_value' => null,
'transaction_create_timestamp' => null,
'transaction_update_timestamp' => null,
'transaction_event_id' => null,
'transaction_event_date_id' => null,
'transaction_status' => null,
'transaction_payment_method' => null,
'transaction_payment_info' => null,
'transaction_installments' => null,
'transaction_is_fraud' => null,
'transaction_tickets_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transaction_id',
'transaction_sales' => 'transaction_sales',
'transaction_user_id' => 'transaction_user_id',
'transaction_value' => 'transaction_value',
'transaction_create_timestamp' => 'transaction_create_timestamp',
'transaction_update_timestamp' => 'transaction_update_timestamp',
'transaction_event_id' => 'transaction_event_id',
'transaction_event_date_id' => 'transaction_event_date_id',
'transaction_status' => 'transaction_status',
'transaction_payment_method' => 'transaction_payment_method',
'transaction_payment_info' => 'transaction_payment_info',
'transaction_installments' => 'transaction_installments',
'transaction_is_fraud' => 'transaction_is_fraud',
'transaction_tickets_id' => 'transaction_tickets_id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
'transaction_sales' => 'setTransactionSales',
'transaction_user_id' => 'setTransactionUserId',
'transaction_value' => 'setTransactionValue',
'transaction_create_timestamp' => 'setTransactionCreateTimestamp',
'transaction_update_timestamp' => 'setTransactionUpdateTimestamp',
'transaction_event_id' => 'setTransactionEventId',
'transaction_event_date_id' => 'setTransactionEventDateId',
'transaction_status' => 'setTransactionStatus',
'transaction_payment_method' => 'setTransactionPaymentMethod',
'transaction_payment_info' => 'setTransactionPaymentInfo',
'transaction_installments' => 'setTransactionInstallments',
'transaction_is_fraud' => 'setTransactionIsFraud',
'transaction_tickets_id' => 'setTransactionTicketsId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
'transaction_sales' => 'getTransactionSales',
'transaction_user_id' => 'getTransactionUserId',
'transaction_value' => 'getTransactionValue',
'transaction_create_timestamp' => 'getTransactionCreateTimestamp',
'transaction_update_timestamp' => 'getTransactionUpdateTimestamp',
'transaction_event_id' => 'getTransactionEventId',
'transaction_event_date_id' => 'getTransactionEventDateId',
'transaction_status' => 'getTransactionStatus',
'transaction_payment_method' => 'getTransactionPaymentMethod',
'transaction_payment_info' => 'getTransactionPaymentInfo',
'transaction_installments' => 'getTransactionInstallments',
'transaction_is_fraud' => 'getTransactionIsFraud',
'transaction_tickets_id' => 'getTransactionTicketsId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSACTION_PAYMENT_METHOD_CREDIT_CARD = 'credit_card';
const TRANSACTION_PAYMENT_METHOD_BANK_BILLET = 'bank_billet';
const TRANSACTION_PAYMENT_METHOD_OTHER = 'other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionPaymentMethodAllowableValues()
    {
        return [
            self::TRANSACTION_PAYMENT_METHOD_CREDIT_CARD,
self::TRANSACTION_PAYMENT_METHOD_BANK_BILLET,
self::TRANSACTION_PAYMENT_METHOD_OTHER,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['transaction_sales'] = isset($data['transaction_sales']) ? $data['transaction_sales'] : null;
        $this->container['transaction_user_id'] = isset($data['transaction_user_id']) ? $data['transaction_user_id'] : null;
        $this->container['transaction_value'] = isset($data['transaction_value']) ? $data['transaction_value'] : null;
        $this->container['transaction_create_timestamp'] = isset($data['transaction_create_timestamp']) ? $data['transaction_create_timestamp'] : null;
        $this->container['transaction_update_timestamp'] = isset($data['transaction_update_timestamp']) ? $data['transaction_update_timestamp'] : null;
        $this->container['transaction_event_id'] = isset($data['transaction_event_id']) ? $data['transaction_event_id'] : null;
        $this->container['transaction_event_date_id'] = isset($data['transaction_event_date_id']) ? $data['transaction_event_date_id'] : null;
        $this->container['transaction_status'] = isset($data['transaction_status']) ? $data['transaction_status'] : null;
        $this->container['transaction_payment_method'] = isset($data['transaction_payment_method']) ? $data['transaction_payment_method'] : null;
        $this->container['transaction_payment_info'] = isset($data['transaction_payment_info']) ? $data['transaction_payment_info'] : null;
        $this->container['transaction_installments'] = isset($data['transaction_installments']) ? $data['transaction_installments'] : null;
        $this->container['transaction_is_fraud'] = isset($data['transaction_is_fraud']) ? $data['transaction_is_fraud'] : null;
        $this->container['transaction_tickets_id'] = isset($data['transaction_tickets_id']) ? $data['transaction_tickets_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        if ($this->container['transaction_sales'] === null) {
            $invalidProperties[] = "'transaction_sales' can't be null";
        }
        if ($this->container['transaction_user_id'] === null) {
            $invalidProperties[] = "'transaction_user_id' can't be null";
        }
        if ($this->container['transaction_value'] === null) {
            $invalidProperties[] = "'transaction_value' can't be null";
        }
        if ($this->container['transaction_update_timestamp'] === null) {
            $invalidProperties[] = "'transaction_update_timestamp' can't be null";
        }
        if ($this->container['transaction_event_id'] === null) {
            $invalidProperties[] = "'transaction_event_id' can't be null";
        }
        if ($this->container['transaction_event_date_id'] === null) {
            $invalidProperties[] = "'transaction_event_date_id' can't be null";
        }
        if ($this->container['transaction_status'] === null) {
            $invalidProperties[] = "'transaction_status' can't be null";
        }
        if ($this->container['transaction_payment_method'] === null) {
            $invalidProperties[] = "'transaction_payment_method' can't be null";
        }
        $allowedValues = $this->getTransactionPaymentMethodAllowableValues();
        if (!is_null($this->container['transaction_payment_method']) && !in_array($this->container['transaction_payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transaction_payment_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['transaction_payment_info'] === null) {
            $invalidProperties[] = "'transaction_payment_info' can't be null";
        }
        if ($this->container['transaction_installments'] === null) {
            $invalidProperties[] = "'transaction_installments' can't be null";
        }
        if ($this->container['transaction_is_fraud'] === null) {
            $invalidProperties[] = "'transaction_is_fraud' can't be null";
        }
        if ($this->container['transaction_tickets_id'] === null) {
            $invalidProperties[] = "'transaction_tickets_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id transaction_id
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets transaction_sales
     *
     * @return string
     */
    public function getTransactionSales()
    {
        return $this->container['transaction_sales'];
    }

    /**
     * Sets transaction_sales
     *
     * @param string $transaction_sales transaction_sales
     *
     * @return $this
     */
    public function setTransactionSales($transaction_sales)
    {
        $this->container['transaction_sales'] = $transaction_sales;

        return $this;
    }

    /**
     * Gets transaction_user_id
     *
     * @return string
     */
    public function getTransactionUserId()
    {
        return $this->container['transaction_user_id'];
    }

    /**
     * Sets transaction_user_id
     *
     * @param string $transaction_user_id transaction_user_id
     *
     * @return $this
     */
    public function setTransactionUserId($transaction_user_id)
    {
        $this->container['transaction_user_id'] = $transaction_user_id;

        return $this;
    }

    /**
     * Gets transaction_value
     *
     * @return string
     */
    public function getTransactionValue()
    {
        return $this->container['transaction_value'];
    }

    /**
     * Sets transaction_value
     *
     * @param string $transaction_value transaction_value
     *
     * @return $this
     */
    public function setTransactionValue($transaction_value)
    {
        $this->container['transaction_value'] = $transaction_value;

        return $this;
    }

    /**
     * Gets transaction_create_timestamp
     *
     * @return string
     */
    public function getTransactionCreateTimestamp()
    {
        return $this->container['transaction_create_timestamp'];
    }

    /**
     * Sets transaction_create_timestamp
     *
     * @param string $transaction_create_timestamp transaction_create_timestamp
     *
     * @return $this
     */
    public function setTransactionCreateTimestamp($transaction_create_timestamp)
    {
        $this->container['transaction_create_timestamp'] = $transaction_create_timestamp;

        return $this;
    }

    /**
     * Gets transaction_update_timestamp
     *
     * @return string
     */
    public function getTransactionUpdateTimestamp()
    {
        return $this->container['transaction_update_timestamp'];
    }

    /**
     * Sets transaction_update_timestamp
     *
     * @param string $transaction_update_timestamp transaction_update_timestamp
     *
     * @return $this
     */
    public function setTransactionUpdateTimestamp($transaction_update_timestamp)
    {
        $this->container['transaction_update_timestamp'] = $transaction_update_timestamp;

        return $this;
    }

    /**
     * Gets transaction_event_id
     *
     * @return string
     */
    public function getTransactionEventId()
    {
        return $this->container['transaction_event_id'];
    }

    /**
     * Sets transaction_event_id
     *
     * @param string $transaction_event_id transaction_event_id
     *
     * @return $this
     */
    public function setTransactionEventId($transaction_event_id)
    {
        $this->container['transaction_event_id'] = $transaction_event_id;

        return $this;
    }

    /**
     * Gets transaction_event_date_id
     *
     * @return string
     */
    public function getTransactionEventDateId()
    {
        return $this->container['transaction_event_date_id'];
    }

    /**
     * Sets transaction_event_date_id
     *
     * @param string $transaction_event_date_id transaction_event_date_id
     *
     * @return $this
     */
    public function setTransactionEventDateId($transaction_event_date_id)
    {
        $this->container['transaction_event_date_id'] = $transaction_event_date_id;

        return $this;
    }

    /**
     * Gets transaction_status
     *
     * @return string
     */
    public function getTransactionStatus()
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     *
     * @param string $transaction_status transaction_status
     *
     * @return $this
     */
    public function setTransactionStatus($transaction_status)
    {
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets transaction_payment_method
     *
     * @return string
     */
    public function getTransactionPaymentMethod()
    {
        return $this->container['transaction_payment_method'];
    }

    /**
     * Sets transaction_payment_method
     *
     * @param string $transaction_payment_method transaction_payment_method
     *
     * @return $this
     */
    public function setTransactionPaymentMethod($transaction_payment_method)
    {
        $allowedValues = $this->getTransactionPaymentMethodAllowableValues();
        if (!in_array($transaction_payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transaction_payment_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_payment_method'] = $transaction_payment_method;

        return $this;
    }

    /**
     * Gets transaction_payment_info
     *
     * @return 
     */
    public function getTransactionPaymentInfo()
    {
        return $this->container['transaction_payment_info'];
    }

    /**
     * Sets transaction_payment_info
     *
     * @param  $transaction_payment_info transaction_payment_info
     *
     * @return $this
     */
    public function setTransactionPaymentInfo($transaction_payment_info)
    {
        $this->container['transaction_payment_info'] = $transaction_payment_info;

        return $this;
    }

    /**
     * Gets transaction_installments
     *
     * @return string
     */
    public function getTransactionInstallments()
    {
        return $this->container['transaction_installments'];
    }

    /**
     * Sets transaction_installments
     *
     * @param string $transaction_installments transaction_installments
     *
     * @return $this
     */
    public function setTransactionInstallments($transaction_installments)
    {
        $this->container['transaction_installments'] = $transaction_installments;

        return $this;
    }

    /**
     * Gets transaction_is_fraud
     *
     * @return bool
     */
    public function getTransactionIsFraud()
    {
        return $this->container['transaction_is_fraud'];
    }

    /**
     * Sets transaction_is_fraud
     *
     * @param bool $transaction_is_fraud transaction_is_fraud
     *
     * @return $this
     */
    public function setTransactionIsFraud($transaction_is_fraud)
    {
        $this->container['transaction_is_fraud'] = $transaction_is_fraud;

        return $this;
    }

    /**
     * Gets transaction_tickets_id
     *
     * @return null[]
     */
    public function getTransactionTicketsId()
    {
        return $this->container['transaction_tickets_id'];
    }

    /**
     * Sets transaction_tickets_id
     *
     * @param null[] $transaction_tickets_id transaction_tickets_id
     *
     * @return $this
     */
    public function setTransactionTicketsId($transaction_tickets_id)
    {
        $this->container['transaction_tickets_id'] = $transaction_tickets_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
