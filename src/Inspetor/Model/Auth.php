<?php
/**
 * Auth
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inspetor Antifraud
 *
 * This is an antifraud product developed to analyzes transactions and identify frauds using trackers and analytics tools. This file must explain every request and parametes that a library must provide to a client.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: theo@useinspetor.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Auth Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Auth implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Auth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auth_user_id' => 'string',
'auth_user_email_hash' => 'string',
'auth_company_id' => 'string',
'auth_company_name' => 'string',
'auth_timestamp' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auth_user_id' => null,
'auth_user_email_hash' => null,
'auth_company_id' => null,
'auth_company_name' => null,
'auth_timestamp' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auth_user_id' => 'auth_user_id',
'auth_user_email_hash' => 'auth_user_email_hash',
'auth_company_id' => 'auth_company_id',
'auth_company_name' => 'auth_company_name',
'auth_timestamp' => 'auth_timestamp'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auth_user_id' => 'setAuthUserId',
'auth_user_email_hash' => 'setAuthUserEmailHash',
'auth_company_id' => 'setAuthCompanyId',
'auth_company_name' => 'setAuthCompanyName',
'auth_timestamp' => 'setAuthTimestamp'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auth_user_id' => 'getAuthUserId',
'auth_user_email_hash' => 'getAuthUserEmailHash',
'auth_company_id' => 'getAuthCompanyId',
'auth_company_name' => 'getAuthCompanyName',
'auth_timestamp' => 'getAuthTimestamp'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auth_user_id'] = isset($data['auth_user_id']) ? $data['auth_user_id'] : null;
        $this->container['auth_user_email_hash'] = isset($data['auth_user_email_hash']) ? $data['auth_user_email_hash'] : null;
        $this->container['auth_company_id'] = isset($data['auth_company_id']) ? $data['auth_company_id'] : null;
        $this->container['auth_company_name'] = isset($data['auth_company_name']) ? $data['auth_company_name'] : null;
        $this->container['auth_timestamp'] = isset($data['auth_timestamp']) ? $data['auth_timestamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['auth_user_id'] === null) {
            $invalidProperties[] = "'auth_user_id' can't be null";
        }
        if ($this->container['auth_timestamp'] === null) {
            $invalidProperties[] = "'auth_timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auth_user_id
     *
     * @return string
     */
    public function getAuthUserId()
    {
        return $this->container['auth_user_id'];
    }

    /**
     * Sets auth_user_id
     *
     * @param string $auth_user_id auth_user_id
     *
     * @return $this
     */
    public function setAuthUserId($auth_user_id)
    {
        $this->container['auth_user_id'] = $auth_user_id;

        return $this;
    }

    /**
     * Gets auth_user_email_hash
     *
     * @return string
     */
    public function getAuthUserEmailHash()
    {
        return $this->container['auth_user_email_hash'];
    }

    /**
     * Sets auth_user_email_hash
     *
     * @param string $auth_user_email_hash auth_user_email_hash
     *
     * @return $this
     */
    public function setAuthUserEmailHash($auth_user_email_hash)
    {
        $this->container['auth_user_email_hash'] = $auth_user_email_hash;

        return $this;
    }

    /**
     * Gets auth_company_id
     *
     * @return string
     */
    public function getAuthCompanyId()
    {
        return $this->container['auth_company_id'];
    }

    /**
     * Sets auth_company_id
     *
     * @param string $auth_company_id auth_company_id
     *
     * @return $this
     */
    public function setAuthCompanyId($auth_company_id)
    {
        $this->container['auth_company_id'] = $auth_company_id;

        return $this;
    }

    /**
     * Gets auth_company_name
     *
     * @return string
     */
    public function getAuthCompanyName()
    {
        return $this->container['auth_company_name'];
    }

    /**
     * Sets auth_company_name
     *
     * @param string $auth_company_name auth_company_name
     *
     * @return $this
     */
    public function setAuthCompanyName($auth_company_name)
    {
        $this->container['auth_company_name'] = $auth_company_name;

        return $this;
    }

    /**
     * Gets auth_timestamp
     *
     * @return string
     */
    public function getAuthTimestamp()
    {
        return $this->container['auth_timestamp'];
    }

    /**
     * Sets auth_timestamp
     *
     * @param string $auth_timestamp auth_timestamp
     *
     * @return $this
     */
    public function setAuthTimestamp($auth_timestamp)
    {
        $this->container['auth_timestamp'] = $auth_timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
